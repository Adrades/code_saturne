
#ifndef __CS_LES_INFLOW_H__
#define __CS_LES_INFLOW_H__

/*============================================================================
 * Turbulent inflow generation
 *============================================================================*/

/*
  This file is part of Code_Saturne, a general-purpose CFD tool.

  Copyright (C) 1998-2020 EDF S.A.

  This program is free software; you can redistribute it and/or modify it under
  the terms of the GNU General Public License as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any later
  version.

  This program is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
  details.

  You should have received a copy of the GNU General Public License along with
  this program; if not, write to the Free Software Foundation, Inc., 51 Franklin
  Street, Fifth Floor, Boston, MA 02110-1301, USA.
*/

/*----------------------------------------------------------------------------*/

#include "cs_defs.h"

/*----------------------------------------------------------------------------
 *  Local headers
 *----------------------------------------------------------------------------*/

#include "cs_base.h"

/*----------------------------------------------------------------------------*/

BEGIN_C_DECLS

/*============================================================================
 * Macro definitions
 *============================================================================*/

/*============================================================================
 * Type definitions
 *============================================================================*/

/*----------------------------------------------------------------------------
 * Type of synthetic turbulence generation
 *----------------------------------------------------------------------------*/

typedef enum {

  CS_INFLOW_LAMINAR,  /* Laminar fluctuations (i.e no fluctuation) */
  CS_INFLOW_RANDOM,   /* Gaussian random fluctuation */
  CS_INFLOW_BATTEN,   /* Fluctuations generated by the Batten method */
  CS_INFLOW_SEM       /* Fluctuations generated by the Synthetic Eddy Method */

} cs_inflow_type_t;

/*=============================================================================
 * Local Structure Definitions
 *============================================================================*/

/* Inlet definition */
/*------------------*/

typedef struct _cs_inlet_t       cs_inlet_t;

typedef struct {

  int         n_structures;       /* Number of coherent structures */
  int         volume_mode;        /* Indicator to use classic inlet SEM (0)
                                     or volumic SEM over the domain */
  cs_real_t  *position;           /* Position of the structures */
  cs_real_t  *energy;             /* Anisotropic energy of the structures */

} cs_inflow_sem_t;

/*=============================================================================
 * Public function prototypes for Fortran API
 *============================================================================*/

/*----------------------------------------------------------------------------
 * Creation of a structure for the inlets
 *----------------------------------------------------------------------------*/

void CS_PROCF(defsyn, DEFSYN)
(
 int  *n_inlets,                   /* <-- number of inlets                    */
 int  *n_structures,               /* <-- number of structures                */
 int  *volume_mode                 /* <-- Variable to use classic SEM or
                                          volume SEM                          */
);

/*----------------------------------------------------------------------------
 * General synthetic turbulence generation
 *----------------------------------------------------------------------------*/

void CS_PROCF(synthe, SYNTHE)
(
 const int       *const nvar,      /* --> number of variables                 */
 const int       *const nscal,     /* --> number of scalars                   */
 const int       *const iu,        /* --> index of velocity component         */
 const int       *const iv,        /* --> index of velocity component         */
 const int       *const iw,        /* --> index of velocity component         */
 const cs_real_t *const ttcabs,    /* --> current physical time               */
 const cs_real_t        dt[],      /* --> time step                           */
       cs_real_t        rcodcl[]   /* <-> boundary conditions array           */
);

void CS_PROCF(cs_user_les_inflow_init, CS_USER_LES_INFLOW_INIT)(
 int                   *nent,      /* <-- number of LES inlets                */
 int                   *nstruct,   /* <-- numb. of entities of the inflow meth*/
 int                   *volmode    /* <-- volumic SEM mode or normal one      */
);

void CS_PROCF(cs_user_les_inflow_define, CS_USER_LES_INFLOW_DEFINE)(
 const int       *const nument,    /* --> id of the inlet                     */
 int                   *typent,    /* <-- type of inflow method at the inlet  */
 int                   *iverbo,    /* <-- verbosity level                     */
 cs_lnum_t             *nfbent,    /* <-- numb. of bound. faces of the inlet  */
 cs_lnum_t              lfbent[],  /* <-- list of bound. faces of the inlet   */
 cs_real_t              vitent[],  /* <-- ref. mean velocity at the inlet     */
 cs_real_t             *enrent,    /* <-- ref. turb. kin. ener. at the inlet  */
 cs_real_t             *dspent     /* <-- ref. turb. dissipation at the inlet */
);

void CS_PROCF(cs_user_les_inflow_advanced, CS_USER_LES_INFLOW_ADVANCED)(
 const int        *const nument,   /* --> id of the inlet                     */
 const cs_lnum_t  *const nfbent,   /* --> numb. of bound. faces of the inlet  */
 const int        *const nvar,     /* --> number of variables                 */
 const int        *const nscal,    /* --> number of scalars                   */
 const cs_lnum_t         lfbent[], /* --> list of bound. faces of the inlet   */
 const cs_real_t         dt[],     /* --> time step                           */
       cs_real_t         uent[],   /* <-- mean velocity at the inlet faces    */
       cs_real_t         rijent[], /* <-- turb. kin. ener. at the inlet faces */
       cs_real_t         epsent[]  /* <-- turb. dissipation at the inlet faces*/
);

/*----------------------------------------------------------------------------
 * Read the restart file of the LES inflow module
 *
 * Fortran interface:
 *
 * SUBROUTINE LECSYN
 * *****************
 *
 * character(kind=c_char)  filename : <-- : Name of the restart file
 *----------------------------------------------------------------------------*/

void CS_PROCF(lecsyn, LECSYN)
(
 const char  *filename
);

/*----------------------------------------------------------------------------
 * Write the restart file of les inflow module
 *
 * Fortran interface:
 *
 * SUBROUTINE ECRSYN
 * *****************
 *
 * character(kind=c_char)  filename : <-- : Name of the restart file
 *----------------------------------------------------------------------------*/

void CS_PROCF(ecrsyn, ECRSYN)
(
 const char  *filename
);

/*=============================================================================
 * Public function prototypes
 *============================================================================*/

/*----------------------------------------------------------------------------
 * Finalize turbulent inflow generation API.
 *----------------------------------------------------------------------------*/

void
cs_inflow_finalize(void);

/*----------------------------------------------------------------------------
 * Generation of synthetic turbulence via the Synthetic Eddy Method (SEM).
 *
 * parameters:
 *   n_points          --> Local number of points where turbulence is generated
 *   num_face          --> Local id of inlet boundary faces
 *   point_coordinates --> Coordinates of the points
 *   point_ponderation --> Ponderation of the points (surface, volume or NULL)
 *   initialize        --> Indicator of initialization
 *   verbosity         --> Indicator of verbosity level
 *   inflow            --> Specific structure for Batten method
 *   time_step         --> Time step at the present iteration
 *   velocity          --> Velocity at each point
 *   reynolds_stresses --> Reynolds stresses at each point
 *   dissipation_rate  --> Dissipation rate at each point
 *   fluctuations      <-- Velocity fluctuations generated at each point
 *----------------------------------------------------------------------------*/

void
cs_les_synthetic_eddy_method(cs_lnum_t         n_points,
                             const cs_lnum_t  *num_face,
                             const cs_real_t  *point_coordinates,
                             const cs_real_t  *point_ponderation,
                             int               initialize,
                             int               verbosity,
                             cs_inflow_sem_t  *inflow,
                             cs_real_t         time_step,
                             const cs_real_t  *velocity,
                             const cs_real_t  *reynolds_stresses,
                             const cs_real_t  *dissipation_rate,
                             cs_real_t        *fluctuations);

/*----------------------------------------------------------------------------
 * Rescaling of the fluctuations by the statistics following the Lund method.
 *
 * One assumes that the statistics are interlaced and ordered as follow :
 *   <u'u'>  <v'v'>  <w'w'>  <u'v'>  <u'w'>  <v'w'>
 *
 * parameters:
 *   n_points          --> Local number of points where turbulence is generated
 *   statistics        --> Statistics (i.e. Reynolds stresses)
 *   fluctuations      <-- Velocity fluctuations generated
 *----------------------------------------------------------------------------*/

void
cs_les_rescale_fluctuations(cs_lnum_t    n_points,
                            cs_real_t   *statistics,
                            cs_real_t   *fluctuations);

/*----------------------------------------------------------------------------*/

END_C_DECLS

#endif /* __CS_LES_INFLOW_H__ */
