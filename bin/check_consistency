#!/bin/sh
#============================================================================
#
#     This file is part of the Code_Saturne Kernel, element of the
#     Code_Saturne CFD tool.
#
#     Copyright (C) 1998-2008 EDF S.A., France
#
#     contact: saturne-support@edf.fr
#
#     The Code_Saturne Kernel is free software; you can redistribute it
#     and/or modify it under the terms of the GNU General Public License
#     as published by the Free Software Foundation; either version 2 of
#     the License, or (at your option) any later version.
#
#     The Code_Saturne Kernel is distributed in the hope that it will be
#     useful, but WITHOUT ANY WARRANTY; without even the implied warranty
#     of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with the Code_Saturne Kernel; if not, write to the
#     Free Software Foundation, Inc.,
#     51 Franklin St, Fifth Floor,
#     Boston, MA  02110-1301  USA
#
#============================================================================
#
# Function used to check if a user subroutine is present
#  we keep things minimalistic here
#   (we could check that uslag2 effectively contains uslag2 or
#   that it compiles...)
presence () {

  presence_sspgm=$1

  if [ ! -f "${presence_sspgm}" ] ; then
    presence_PRESENT="no"
  else
    presence_PRESENT="yes"
  fi
  echo ${presence_PRESENT}
}
#
########################################################################
#
args=""
if [ "$*" != "" ] ; then
  args="$*"
fi
#
cur_dir=`pwd`
param=""
nproc=1
expect_dir="false"
expect_param="false"
expect_nproc="false"
#
for arg in $args ; do
  #
  if [ "$expect_dir" = "true" ] ; then
    cur_dir=$arg
    expect_dir="false"
  fi
  if [ "$expect_param" = "true" ] ; then
    param=$arg
    expect_param="false"
  fi
  if [ "$expect_nproc" = "true" ] ; then
    nproc=$arg
    expect_nproc="false"
  fi
  #
  if [ "$arg" = "-dir" ] ; then
    expect_dir="true"
  else
    expect_dir="false"
  fi
  if [ "$arg" = "-param" ] ; then
    expect_param="true"
  else
    expect_param="false"
  fi
  if [ "$arg" = "-nproc" ] ; then
    expect_nproc="true"
  else
    expect_nproc="false"
  fi
  #
done
#
#
# Detect presence of modules

# Standard
USCLIM_PRESENT=`presence "${cur_dir}/usclim.F"`

# Lagrangien
USLAG2_PRESENT=`presence "${cur_dir}/uslag2.F"`

# Radiative transfer
USRAY2_PRESENT=`presence "${cur_dir}/usray2.F"`
if [ ! -z "${param}" ] ; then
  NRAYT=`grep "radiative_transfer\ model" ${param} | grep -v "off" |wc -l`
  if [ $NRAYT -eq 1 ] ; then
    USRAY2_PRESENT="yes"
  fi
fi

# Pulverized coal
USCPCL_PRESENT=`presence "${cur_dir}/uscpcl.F"`
if [ ! -z "${param}" ] ; then
  NCHARB=`grep "pulverized_coal\ model" ${param} | grep -v "off" |wc -l`
  if [ $NCHARB -eq 1 ] ; then
    USCPCL_PRESENT="yes"
  fi
fi

# Gas combustion with 3 point chemistry
USD3PC_PRESENT=`presence "${cur_dir}/usd3pc.F"`

# EBU gas combustion
USEBUC_PRESENT=`presence "${cur_dir}/usebuc.F"`

# Combustion gaz LWC
USLWCC_PRESENT=`presence "${cur_dir}/uslwcc.F"`

# Electric arcs
USELCL_PRESENT=`presence "${cur_dir}/uselcl.F"`

# Compressible
USCFCL_PRESENT=`presence "${cur_dir}/uscfcl.F"`

# Fuel
USFUCL_PRESENT=`presence "${cur_dir}/usfucl.F"`

# Atmospheric
USATCL_PRESENT=`presence "${cur_dir}/usatcl.F"`

# Cooling towers
USCTCL_PRESENT=`presence "${cur_dir}/usctcl.F"`

# Compatibility tests

if [ "${USCPCL_PRESENT}" = "yes" ] ; then
  if [ "${USCLIM_PRESENT}" = "yes" ] ; then
    echo
    echo ' -- ERROR -- '
    echo ' When the pulverized coal model is used,'
    echo '  usclim not be used.'
    echo '  Boundary conditions are defined through'
    echo '  the GUI or uscpcl.'
    echo
    exit 1
  fi
fi

if [ "${USD3PC_PRESENT}" = "yes" ] ; then
  if [ "${USCLIM_PRESENT}" = "yes" ] ; then
    echo
    echo ' -- ERROR -- '
    echo ' When usd3pc is used, usclim must not be'
    echo '  (combustion with 3-point chemistry model)'
    echo '  Boundary conditions are defined in usd3pc.'
    echo
    exit 1
  fi
fi

if [ "${USEBUC_PRESENT}" = "yes" ] ; then
  if [ "${USCLIM_PRESENT}" = "yes" ] ; then
    echo
    echo ' -- ERROR -- '
    echo ' When usebuc is used, usclim must not be'
    echo '  (EBU combustion model)'
    echo '  Boundary conditions are defined in usebuc.'
    echo
    exit 1
  fi
fi

if [ "${USLWCC_PRESENT}" = "yes" ] ; then
  if [ "${USCLIM_PRESENT}" = "yes" ] ; then
    echo
    echo ' -- ERROR -- '
    echo ' When uslwcc is used, usclim must not be'
    echo '  (LWC combustion model)'
    echo '  Boundary conditions are defined in uslwcc.'
    echo
    exit 1
  fi
fi

if [ "${USELCL_PRESENT}" = "yes" ] ; then
  if [ "${USCLIM_PRESENT}" = "yes" ] ; then
    echo
    echo ' -- ERROR -- '
    echo ' When uselcl is used, usclim must not be'
    echo '  (Electric arcs model)'
    echo '  Boundary conditions are defined in uselcl.'
    echo
    exit 1
  fi
fi

if [ "${USCFCL_PRESENT}" = "yes" ] ; then
  if [ "${USCLIM_PRESENT}" = "yes" ] ; then
    echo
    echo ' -- ERROR -- '
    echo ' When uscfcl is used, usclim must not be'
    echo '  (Compressible model)'
    echo '  Boundary conditions are defined in uscfcl.'
    echo
    exit 1
  fi
fi

if [ "${USFUCL_PRESENT}" = "yes" ] ; then
  if [ "${USCLIM_PRESENT}" = "yes" ] ; then
    echo
    echo ' -- ERROR -- '
    echo ' When usfucl is used, usclim must not be'
    echo '  (Fuel model)'
    echo '  Boundary conditions are defined in usfucl.'
    echo
    exit 1
  fi
fi

if [ "${USATCL_PRESENT}" = "yes" ] ; then
  if [ "${USCLIM_PRESENT}" = "yes" ] ; then
    echo
    echo ' -- ERROR -- '
    echo ' When usatcl is used, usclim must not be'
    echo '  (Atmospheric model)'
    echo '  Boundary conditions are defined in usatcl.'
    echo
    exit 1
  fi
fi

if [ "${USCTCL_PRESENT}" = "yes" ] ; then
  if [ "${USCLIM_PRESENT}" = "yes" ] ; then
    echo
    echo ' -- ERROR -- '
    echo ' When usctcl is used, usclim must not be'
    echo '  (Cooling towers model)'
    echo '  Boundary conditions are defined in usctcl.'
    echo
    exit 1
  fi
fi

# Translation
if [ "${USLAG2_PRESENT}" = "yes" ] ; then
  LAGRANGIEN=yes
  echo
  echo ' Use the Lagrangian module'
  echo
else
  LAGRANGIEN=no
fi
if [ "${USRAY2_PRESENT}" = "yes" ] ; then
  RAYONNEMENT=yes
  echo
  echo ' Use the radiative transfer module'
  echo
else
  RAYONNEMENT=no
fi
COMBUSTION=no
if [ "${USCPCL_PRESENT}" = "yes" ] ; then
  COMBUSTION=yes
  COMBUSTION_CPP=yes
  echo
  echo ' Use the pulverized coal combustion module'
  echo
else
  COMBUSTION_CPP=no
fi
if [ "${USD3PC_PRESENT}" = "yes" ] ; then
  COMBUSTION=yes
  COMBUSTION_C3P=yes
  echo
  echo ' Use the 3-point chemistry combustion module'
  echo
else
  COMBUSTION_C3P=no
fi
if [ "${USEBUC_PRESENT}" = "yes" ] ; then
  COMBUSTION=yes
  COMBUSTION_EBU=yes
  echo
  echo ' Use the EBU combustion module'
  echo
else
  COMBUSTION_EBU=no
fi
if [ "${USLWCC_PRESENT}" = "yes" ] ; then
  COMBUSTION=yes
  COMBUSTION_LWC=yes
  echo
  echo ' Use the LWC combustion module'
  echo
else
  COMBUSTION_LWC=no
fi
if [ "${USELCL_PRESENT}" = "yes" ] ; then
  ELECTRIQUE=yes
  echo
  echo ' Use the electric arc module'
  echo
else
  ELECTRIQUE=no
fi

if [ "${USCFCL_PRESENT}" = "yes" ] ; then
  COMPRESSIBLE=yes
  echo
  echo ' Use the compressible module'
  echo
else
  COMPRESSIBLE=no
fi

if [ "${USFUCL_PRESENT}" = "yes" ] ; then
  FUEL=yes
  echo
  echo ' Use the fuel module'
  echo
else
  FUEL=no
fi

if [ "${USATCL_PRESENT}" = "yes" ] ; then
  ATMOSPHERIC=yes
  echo
  echo ' Use the atmospheric module'
  echo
else
  ATMOSPHERIC=no
fi

if [ "${USCTCL_PRESENT}" = "yes" ] ; then
  COOLING_TOWERS=yes
  echo
  echo ' Use the cooling towers module'
  echo
else
  COOLING_TOWERS=no
fi

# No Lagrangian in parallel
if [ "${LAGRANGIEN}" = "yes" ] ; then
  if [ ${nproc} -gt 1 ] ; then
    echo
    echo ' -- ERROR -- '
    echo ' The Lagrangian module is incompatible with'
    echo '  parallel runs as of the current version.'
    echo
    exit 1
  fi
fi

