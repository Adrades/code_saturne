#!/usr/bin/env python
#-------------------------------------------------------------------------------
#   This file is part of the Code_Saturne Solver.
#
#   Copyright (C) 2009  EDF
#
#   The Code_Saturne Preprocessor is free software; you can redistribute it
#   and/or modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2 of
#   the License, or (at your option) any later version.
#
#   The Code_Saturne Preprocessor is distributed in the hope that it will be
#   useful, but WITHOUT ANY WARRANTY; without even the implied warranty
#   of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public Licence
#   along with the Code_Saturne Preprocessor; if not, write to the
#   Free Software Foundation, Inc.,
#   51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Library modules import
#-------------------------------------------------------------------------------


import os, sys
import getopt


#-------------------------------------------------------------------------------
# Usage
#-------------------------------------------------------------------------------


def usage():
    """
    Indicate usage.
    """
    print "Usage: " + sys.argv[0] + " [options]"
    print "Options:"
    print "-h, --help              print this message"
    print "-n, --nproc             number of processors"
    print "-p, --param             parameters file"
    print "-s, --source=<src_dir>  choose source file directory"


#-------------------------------------------------------------------------------
# Checking user files consistency
#-------------------------------------------------------------------------------


def checkConsistency(n_procs, param, src_dir):
    """
    Consistancy checks.
    """

    # List of the different available modules in Code_Saturne 
    modules = ['base', 'lagr', 'rayt', 'cplv', 'fuel', 'c3pt', 'cebu',
               'clwc', 'elec', 'cfbl', 'atmo', 'ctwr']

    # Dictionnary of module's name
    moduleName = {
        'base':'standard',
        'lagr':'lagrangian',
        'rayt':'radiative transfer',
        'cplv':'pulverized coal combustion',
        'fuel':'heavy-fuel oil combustion',
        'c3pt':'3-point chemistry combustion',
        'cebu':'EBU combustion',
        'clwc':'LWC combustion',
        'elec':'electric arcs',
        'cfbl':'compressible',
        'atmo':'atmospheric',
        'ctwr':'cooling towers'}

    # Dictionnary for consistancy check (on boundary conditions definition)
    moduleCheck = {
        'base':False, 'lagr':False, 'rayt':False,
        'cplv':True,  'fuel':True,  'c3pt':True,  'cebu':True,  'clwc':True,
        'elec':True,  'cfbl':True,  'atmo':True,  'ctwr':True}

    # Dictionnary of the correspondance between a module and a specific user file
    moduleFile = {
        'base':'usclim', 'lagr':'uslag2', 'rayt':'usray2', 'cplv':'uscpcl',
        'fuel':'usfucl', 'c3pt':'usd3pc', 'cebu':'usebuc', 'clwc':'uslwcc',
        'elec':'uselcl', 'cfbl':'uscfcl', 'atmo':'usatcl', 'ctwr':'usctcl'}

    # Dictionnary to know if a module is used
    moduleUse = {
        'base':True,  'lagr':False, 'rayt':False, 'cplv':False, 'fuel':False,
        'c3pt':False, 'cebu':False, 'clwc':False, 'elec':False, 'cfbl':False,
        'atmo':False, 'ctwr':False}


    # Function returning a boolean according to the presence of the file given
    # in argument
    def isPresent(file):
        filename = file + '.f90'
        return os.path.isfile(os.path.join(src_dir, filename))


    # Consistancy test, following the definition of the boundary conditions
    errorMsg = """
     --ERROR --
     When %(f1)s is used, %(f2)s must not be
      (%(mod)s module)
      Boundary conditions are defined in %(f1)s.
    """

    if isPresent(moduleFile['base']):
        for mod in modules:
            if moduleCheck[mod] and isPresent(moduleFile[mod]):
                print errorMsg % {'f1':moduleFile[mod],
                                  'f2':moduleFile['base'],
                                  'mod':moduleName[mod]}
                sys.exit(1)


    # Test on the module used (standard module is not considered here)
    moduleMsg = """
     Use the %(mod)s module
    """

    for mod in modules[1:]:
        if isPresent(moduleFile[mod]):
            print moduleMsg % {'mod':moduleName[mod]}
            moduleUse[mod] = True


    # Check if current module is incompatible with parallel runs
    errorMsg = """
     The %(mod)s module is incompatible with
     parallel runs as of the current version.
    """

    if n_procs > 1:
        for mod in ['ctwr','lagr']:
            if moduleUse[mod]:
                print errorMsg % {'mod':moduleName[mod]}
                sys.exit(1)

    return


#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------


if __name__ == "__main__":

    src_dir = os.getcwd()

    try:
        opts, args = getopt.getopt(sys.argv[1:],
                                   "hn:p:s:",
                                   ["help", "nproc=", "param=", "source="])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(1)

    n_procs = 1
    param = ""
    src_dir = os.getcwd()

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif opt in ("-n", "--nproc"):
            n_procs = arg
        elif opt in ("-p", "--param"):
            param = arg
            param = os.path.expanduser(param)
            param = os.path.expandvars(param)
            param = os.path.abspath(param)
        elif opt in ("-s", "--source"):
            src_dir = arg
            src_dir = os.path.expanduser(src_dir)
            src_dir = os.path.expandvars(src_dir)
            src_dir = os.path.abspath(src_dir)
        
    checkConsistency(n_procs, param, src_dir)
