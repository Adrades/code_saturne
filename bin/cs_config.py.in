#!@cs_python@
# @configure_input@
#============================================================================
#
#     This file is part of the Code_Saturne Kernel, element of the
#     Code_Saturne CFD tool.
#
#     Copyright (C) 2009 EDF S.A., France
#
#     contact: saturne-support@edf.fr
#
#     The Code_Saturne Kernel is free software; you can redistribute it
#     and/or modify it under the terms of the GNU General Public License
#     as published by the Free Software Foundation; either version 2 of
#     the License, or (at your option) any later version.
#
#     The Code_Saturne Kernel is distributed in the hope that it will be
#     of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with the Code_Saturne Kernel; if not, write to the
#     Free Software Foundation, Inc.,
#     51 Franklin St, Fifth Floor,
#     Boston, MA  02110-1301  USA
#
#============================================================================

#-------------------------------------------------------------------------------

@cs_config_comments@

#-------------------------------------------------------------------------------

import os.path

# Package Version
#----------------

class package:
    name="@PACKAGE_NAME@"
    version="@PACKAGE_VERSION@"

# Installation directories
#-------------------------

class dirs:
    prefix = "@prefix@"
    exec_prefix = "@exec_prefix@"
    if exec_prefix == "${prefix}":
        exec_prefix = prefix
    bindir = "@bindir@"
    if bindir == "${exec_prefix}/bin":
        bindir = os.path.join(exec_prefix, "bin")
    includedir = "@includedir@"
    if includedir == "${prefix}/include":
        includedir = os.path.join(prefix, "include")
    libdir = "@libdir@"
    if libdir == "${exec_prefix}/lib":
        libdir = os.path.join(exec_prefix, "lib")
    datarootdir = "@datarootdir@"
    if datarootdir == "${prefix}/share":
        datarootdir = os.path.join(prefix, "share")
    datadir = "@datadir@"
    if datadir == "${datarootdir}":
        datadir = datarootdir
    pkgdatadir = os.path.join(datadir, "@PACKAGE@")
    docdir = "@docdir@"
    if docdir == "${datarootdir}/doc/${PACKAGE_TARNAME}":
        docdir = os.path.join(datarootdir, "doc", "@PACKAGE_TARNAME@")
    pdfdir = "@pdfdir@"
    if pdfdir == "${docdir}":
        pdfdir = docdir
    ecs_prefix = "@ecs_prefix@"
    ecs_exec_prefix = ecs_prefix
    ecs_bindir = os.path.join(ecs_exec_prefix, "bin")
    syrthes_prefix = "@syrthes_prefix@"

# Optional MPI library info
#--------------------------

class mpi_lib:
    type = "@MPI_TYPE@"
    bindir = "@MPI_BIN@"

# Build tools, option, and libraries
#-----------------------------------

class build:
    cc="@CC@"
    fc="@FC@"
    cppflags="@CPPFLAGS@ @BFT_CPPFLAGS@ @FVM_CPPFLAGS@ @MEI_CPPFLAGS@ @MPI_CPPFLAGS@ @LIBXML2_CPPFLAGS@ @BLAS_CPPFLAGS@"
    cflags="@CFLAGS@ @CFLAGS_DBG@ @CFLAGS_OPT@"
    fcflags="@FCFLAGS@ @FCFLAGS_DBG@ @FCFLAGS_OPT@"
    ldflags="@MEI_LDFLAGS@ @FVM_LDFLAGS@ @BFT_LDFLAGS@ @MPI_LDFLAGS@ @BLAS_LDFLAGS@ @LIBXML2_LDFLAGS@ @LDFLAGS@"
    libs="@MEI_LIBS@ @FVM_LIBS@ @BFT_LIBS@ @MPI_LIBS@ @BLAS_LIBS@ @LIBXML2_LIBS@ @LIBS@ @FCLIBS@"
    rpath="@LDRPATH@"

class build_syrthes:
    cc="@SYRTHES_CC@"
    fc="@SYRTHES_FC@"
    cppflags="@SYRTHES_CPPFLAGS@"
    cflags="@SYRTHES_CFLAGS@"
    fcflags="@SYRTHES_FCFLAGS@"
    ldflags="@SYRTHES_LDFLAGS@"
    libs="@SYRTHES_LIBS@ @SYRTHES_FCLIBS@"

#-------------------------------------------------------------------------------

def get_config():
    """
    Get the configuration information.
    """
    msg = """\
Directories:
  dirs.prefix = %(prefix)s
  dirs.exec_prefix = %(exec_prefix)s
  dirs.bindir = %(bin)s
  dirs.includedir = %(include)s
  dirs.libdir = %(lib)s
  dirs.datarootdir = %(dataroot)s
  dirs.datadir = %(data)s
  dirs.pkgdatadir = %(pkgdata)s
  dirs.docdir = %(doc)s
  dirs.pdfdir = %(pdf)s

Auxiliary information:
  dirs.ecs_prefix = %(ecs)s
  dirs.syrthes_prefix = %(syrthes)s

MPI library information:
  mpi_lib.type = %(mpi_type)s
  mpi_lib.bindir = %(mpi_bindir)s

Compilers and associated options:
  cc = %(cc)s
  fc = %(fc)s
  cppflags = %(cppflags)s
  cflags = %(cflags)s
  fcflags = %(fcflags)s
  ldflags = %(ldflags)s
  libs = %(libs)s
  rpath = %(rpath)s\
"""

    return msg \
        % { 'prefix':dirs.prefix, 'exec_prefix':dirs.exec_prefix,
            'bin':dirs.bindir, 'include': dirs.includedir, 'lib':dirs.libdir,
            'dataroot':dirs.datarootdir, 'data':dirs.datadir,
            'pkgdata':dirs.pkgdatadir, 'doc':dirs.docdir, 'pdf':dirs.pdfdir,
            'ecs':dirs.ecs_prefix, 'syrthes':dirs.syrthes_prefix,
            'mpi_type':mpi_lib.type, 'mpi_bindir':mpi_lib.bindir,
            'cc':build.cc, 'fc':build.fc,
            'cppflags':build.cppflags, 'cflags':build.cflags,
            'fcflags':build.fcflags, 'ldflags':build.ldflags,
            'libs':build.libs, 'rpath':build.rpath }

#-------------------------------------------------------------------------------

def main(argv):
    """
    Main configuration info function.
    """
    print get_config()

if __name__ == '__main__':
    main(argv)

